import Phaser from 'phaser'
import { Actor } from '@eriengine/plugin-actor'

{{ DATA_LISTS }}
{{ STORAGE_LISTS }}

type ScriptCallback = (this: BaseActor, ...args: any) => void

interface ActorStorage {
    Script: {
        [key: string]: {
            [key: string]: ScriptCallback
        }
    }
}


/**
 * 
 *    ██╗    ██╗     █████╗     ██████╗     ███╗   ██╗    ██╗    ███╗   ██╗     ██████╗ ██╗
 *    ██║    ██║    ██╔══██╗    ██╔══██╗    ████╗  ██║    ██║    ████╗  ██║    ██╔════╝ ██║
 *    ██║ █╗ ██║    ███████║    ██████╔╝    ██╔██╗ ██║    ██║    ██╔██╗ ██║    ██║  ███╗██║
 *    ██║███╗██║    ██╔══██║    ██╔══██╗    ██║╚██╗██║    ██║    ██║╚██╗██║    ██║   ██║╚═╝
 *    ╚███╔███╔╝    ██║  ██║    ██║  ██║    ██║ ╚████║    ██║    ██║ ╚████║    ╚██████╔╝██╗
 *     ╚══╝╚══╝     ╚═╝  ╚═╝    ╚═╝  ╚═╝    ╚═╝  ╚═══╝    ╚═╝    ╚═╝  ╚═══╝     ╚═════╝ ╚═╝
 *                                                                                        
 *                                                                 
 *  주의!
 *  절대로 BaseActor 내용을 건들지 마십시오.
 *  만일 추가하고 싶은 내용이 있다면 BaseActor를 상속받은 액터 파일을 수정하십시오.
 *  하지만 가장 좋은 방법은, 액터의 스크립트를 이용하는 것입니다.
 * 
 *  
 *  모든 액터는 이 BaseActor을 상속받습니다.
 *  BaseActor는 에리엔진의 액터가 정상적으로 동작하기 위해 필수적인 내용을 가지고 있는 클래스입니다.
 *  BaseActor는 프로젝트가 실행될 때 마다 새롭게 재생성됩니다. 따라서 이 파일을 수정하여도 전부 초기화되므로 건들지 마십시오.
 */
export default abstract class BaseActor extends Actor {

    protected __scripts: Map<string, ScriptCallback[]> = new Map

    protected generateSkill(data: typeof Skills): void {
        for (const name in data) {
            const skill = data[name as keyof typeof data]
            this.battle.addSkill(skill.key, skill.default.bind(this))

            this.battle.on('hit',       (target, information) =>    this.runScript.call(this, this.__scripts.get('onActorHit'), target, information))
            this.battle.on('get-hit',   (from, information) =>      this.runScript.call(this, this.__scripts.get('onActorGetHit'), from, information))
            this.battle.on('win',       (from) =>                   this.runScript.call(this, this.__scripts.get('onActorWin'), from))
            this.battle.on('defeat',    (...froms) =>               this.runScript.call(this, this.__scripts.get('onActorDefeat'), ...froms))
        }
    }

    protected generateScript(storages: typeof Storages, key: keyof typeof storages): void {
        const storage: ActorStorage = storages[key] as unknown as ActorStorage
        if (!storage) {
            throw `${this.constructor.name} 액터에 스토리지 정보가 없습니다.`
        }
        const script = storage.Script
        for (const name in script) {
            const callbackData = script[name as keyof typeof script]
            for (const type in callbackData) {
                if (!this.__scripts.has(type)) {
                    this.__scripts.set(type, [])
                }
                const callback: ScriptCallback = callbackData[type as keyof typeof callbackData]
                this.__scripts.get(type)!.push(callback)
            }
        }
    }

    protected runScript(callbacks?: ((...args: any) => void)[], ...args: any): void {
        if (!callbacks)  {
            return
        }
        callbacks.forEach((callback): void => callback.call(this, ...args))
    }
    
}