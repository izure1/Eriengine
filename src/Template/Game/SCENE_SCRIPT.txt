import Phaser from 'phaser'
import * as Key from 'keycode-js'
import BaseActor from '@/BaseActor'

{{ DATA_LISTS }}


/**
 *  타입 추론을 위한 클래스 타입입니다.
 *  해당하는 올바른 씬을 선택하여 주십시오.
 *
 *  이 스크립트에서만 사용하고 싶은 임시 멤버변수가 있다면, 이 클래스 안에서 선언해둘 수 있습니다.
 *  다만 선언되어 있을 뿐이지, 실제로 그 데이터를 갖게 되는 것은 아니기 때문에 주의하십시오.
 */
declare class Scene extends Scenes['{{ SCENE_LIST_KEY }}'].default {}

/*
 *  스크립트로 씬의 라이프사이클을 좀 더 쉽게 관리할 수 있습니다.
 *  라이프사이클에 대한 자세한 설명은 아래 링크의 문서를 확인하십시오
 *  https://rexrainbow.github.io/phaser3-rex-notes/docs/site/scene/#flow-chart
 */

/**
 *  씬이 새롭게 시작되었을 때 호출될 함수입니다.
 *  이 단계에선 아직 액터와 게임오브젝트를 생성할 수 없습니다.
 *
 *  씬에서 사용할 데이터를 설정하는 용도로 사용하십시오.
 */
export function onSceneInit(this: Scene): void {
  {{ onSceneInit }}
}

/**
 *  씬이 에셋을 준비하기 위해 로드될 때 호출될 함수입니다.
 *  이 단계에선 아직 액터와 일부 게임오브젝트를 생성할 수 없습니다.
 *
 *  필요한 에셋을 로드하는 용도로 사용하십시오.
 *  다만 에셋과 데이터로 관리한 이미지, 스프라이트, 오디오, 비디오, 애니메이션 등은 자동으로 로드됩니다. 따라서 추가로 로드할 필요가 없습니다.
 */
export function onScenePreload(this: Scene): void {
  {{ onScenePreload }}
}

/**
 *  씬이 생성되었을 때 호출될 함수입니다.
 *  이 단계에서 액터와 게임 오브젝트를 생성할 수 있습니다.
 *
 *  가령 플레이어 객체를 만들고 싶다면, 플레이어 액터 클래스를 만들고, 씬에 플레이어 멤버변수를 추가한 뒤, 이곳에서 생성하십시오.
 */
export function onSceneCreate(this: Scene): void {
  {{ onSceneCreate }}
}

/**
 *  씬이 업데이트 될 때 마다 호출될 함수입니다.
 *  매 프레임마다 작동하므로 무거운 작업을 사용하지 마십시오.
 *  @param time     씬이 시작하고 지나간 시간(ms)입니다.
 *  @param delta    이전 프레임과 현재 프레임 사이에 흐른 시간(ms)입니다. 60프레임이므로, 일반적으로 16ms입니다.
 */
export function onSceneUpdate(this: Scene, time: number, delta: number): void {
  {{ onSceneUpdate }}
}

/**
 *  씬이 파괴될 때 호출될 함수입니다.
 *  씬에서 생성한 오브젝트는 자동으로 파괴됩니다. 하지만 직접 파괴할 데이터가 있다면 이곳에서 처리하십시오.
 */
export function onSceneDestroy(this: Scene): void {
  {{ onSceneDestroy }}
}



//  ██████╗  ██████╗ ██╗███╗   ██╗████████╗███████╗██████╗     ███████╗██╗   ██╗███████╗███╗   ██╗████████╗
//  ██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝██╔════╝██╔══██╗    ██╔════╝██║   ██║██╔════╝████╗  ██║╚══██╔══╝
//  ██████╔╝██║   ██║██║██╔██╗ ██║   ██║   █████╗  ██████╔╝    █████╗  ██║   ██║█████╗  ██╔██╗ ██║   ██║   
//  ██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗    ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║   ██║   
//  ██║     ╚██████╔╝██║██║ ╚████║   ██║   ███████╗██║  ██║    ███████╗ ╚████╔╝ ███████╗██║ ╚████║   ██║   
//  ╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝    ╚══════╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝   ╚═╝   
//                                                                                                         
//  여기서부터 씬의 포인터 이벤트입니다.
//  포인터를 눌렀거나, 땠을 때 등을 처리할 수 있습니다.

/**
 *  포인터를 눌렀을 때 호출될 함수입니다.
 *  이 함수는 포인터를 누른 순간만 작동합니다.
 *  @param e 포인터 이벤트 정보입니다.
 */
export function onPointerDown(this: Scene, e: Phaser.Input.Pointer): void {
  {{ onPointerDown }}
}

/**
 *  포인터를 땠을 때 호출될 함수입니다.
 *  이 함수는 포인터를 땐 순간만 작동합니다.
 *  @param e 포인터 이벤트 정보입니다.
 */
export function onPointerUp(this: Scene, e: Phaser.Input.Pointer): void {
  {{ onPointerUp }}
}

/**
 *  포인터를 움직일 때 호출될 함수입니다.
 *  @param e 포인터 이벤트 정보입니다.
 */
export function onPointerMove(this: Scene, e: Phaser.Input.Pointer): void {
  {{ onPointerMove }}
}

/**
 *  씬에서 포인터의 휠을 굴렸을 때 호출될 함수입니다.
 *  @param events 포인터 이벤트 정보입니다.
 */
export function onPointerWheel(this: Scene, e: Phaser.Input.Pointer): void {
  {{ onPointerWheel }}
}



//  ██╗  ██╗███████╗██╗   ██╗██████╗  ██████╗  █████╗ ██████╗ ██████╗     ███████╗██╗   ██╗███████╗███╗   ██╗████████╗
//  ██║ ██╔╝██╔════╝╚██╗ ██╔╝██╔══██╗██╔═══██╗██╔══██╗██╔══██╗██╔══██╗    ██╔════╝██║   ██║██╔════╝████╗  ██║╚══██╔══╝
//  █████╔╝ █████╗   ╚████╔╝ ██████╔╝██║   ██║███████║██████╔╝██║  ██║    █████╗  ██║   ██║█████╗  ██╔██╗ ██║   ██║   
//  ██╔═██╗ ██╔══╝    ╚██╔╝  ██╔══██╗██║   ██║██╔══██║██╔══██╗██║  ██║    ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║   ██║   
//  ██║  ██╗███████╗   ██║   ██████╔╝╚██████╔╝██║  ██║██║  ██║██████╔╝    ███████╗ ╚████╔╝ ███████╗██║ ╚████║   ██║   
//  ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝     ╚══════╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝   ╚═╝   
//                                                                                                                    
//  여기서부터 씬의 키보드 이벤트입니다.
//  키보드의 키를 눌렀거나, 땠을 때 등을 처리할 수 있습니다.

/**
 *  키보드를 눌렀을 때 호출될 함수입니다.
 *  이 함수는 키를 누른 순간만 작동합니다.
 *  특정 키를 감지하고 싶다면, `e.code`를 사용하여 특정 키의 코드값을 얻어오십시오.
 *  @param e  키보드 이벤트 정보입니다.
 */
export function onKeyDown(this: Scene, e: KeyboardEvent): void {
  switch (e.code) {
    // case Key.CODE_F: {
    //   break
    // }
    // case Key.CODE_ENTER: {
    //   break
    // }
  }
}

/**
 *  키보드를 땠을 때 호출될 함수입니다.
 *  이 함수는 키를 땐 순간만 작동합니다.
 *  특정 키를 감지하고 싶다면, `e.code`를 사용하여 특정 키의 코드값을 얻어오십시오.
 *  @param e  키보드 이벤트 정보입니다.
 */
export function onKeyUp(this: Scene, e: KeyboardEvent): void {
  switch (e.code) {
    // case Key.CODE_F: {
    //   break
    // }
    // case Key.CODE_ENTER: {
    //   break
    // }
  }
}