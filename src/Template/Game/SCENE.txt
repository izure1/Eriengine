import Phaser from 'phaser'
import { Plugin as ActorPlugin, Actor } from '@eriengine/plugin-actor'
import { Plugin as IsometricScenePlugin } from '@eriengine/plugin-isometric-scene'
import { PointerPlugin as IsometricCursorPlugin, SelectPlugin as IsometricSelectPlugin } from '@eriengine/plugin-isometric-cursor'
import { Plugin as DialoguePlugin } from '@eriengine/plugin-dialogue'
import { Plugin as FogOfWarPlugin } from '@eriengine/plugin-fog-of-war'

import BaseScene from '@/BaseScene'
{{ DATA_LISTS }}
{{ STORAGE_LISTS }}

/*
 *  주의!
 *  씬 파일 이름의 뒷 부분은 절대 변경하지 마십시오.
 *  이 뒷 부분은 씬이 참조해야할 스크립트와 맵의 정보를 담고 있습니다.
 *
 *  가령 파일명이 scene.ABCDE.ts 일 경우, ABCDE 부분은 절대 변경되어선 안됩니다.
 *  씬 파일의 이름을 변경하고 싶다면, newName.ABCDE.ts 의 방식으로 뒷 부분을 제외하고 변경하십시오.
 *
 *
 *
 *
 *  이곳에서 씬의 기본적인 설정을 변경할 수 있습니다.
 *  기본적인 작동을 위한 코드가 이미 작성되어 있습니다만,
 *  좀 더 정교한 프로그래밍을 원한다면 이곳에서 수정을 할 수 있습니다.
 *
 *  하지만 대부분의 기능은 스크립트를 이용하여 처리할 수 있습니다.
 *  가능하다면 스크립트 기능을 이용하도록 하십시오.
 */
export default class NewScene extends BaseScene {
    
    /** 씬의 고유값입니다. 이 값은 다른 씬과 절대로 중복되어선 안됩니다. 잘 모르겠다면 건드리지 마십시오. */
    static Key: string = __filename

    /**
     *  씬의 우선순위입니다. 이 값이 클수록, 작은 값을 가진 씬보다 위에 보여집니다.  
     *  가령 씬A의 Depth가 0이고, 씬B의 Depth가 1일 경우, 씬B가 씬A보다 위에 보여집니다.
     */
    static Depth: number = 0

    constructor() {
        super({ key: NewScene.Key, active: true })
        this.generateMap(Storages, '{{ STORAGE_KEY }}')
        this.generateScript(Storages, '{{ STORAGE_KEY }}')
    }

    init(data: object = {}): void {
        this.runScript(this.__scripts.get('onSceneInit'), data)
        this.events.once(Phaser.Scenes.Events.DESTROY, () => this.runScript(this.__scripts.get('onSceneDestroy')))

        // 이 아래에 작성하세요
    }

    preload(): void {
        this.loadAssets()
        this.runScript(this.__scripts.get('onScenePreload'))

        // 이 아래에 작성하세요
    }

    create(): void {
        this.createAnimation()
        this.createMap()
        this.runScript(this.__scripts.get('onSceneCreate'))

        // 이 아래에 작성하세요
    }

    update(time: number, delta: number): void {
        this.runScript(this.__scripts.get('onSceneUpdate'), time, delta)

        // 이 아래에 작성하세요
    }
}