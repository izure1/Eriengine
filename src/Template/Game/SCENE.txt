import Phaser from 'phaser'
import { Plugin as ActorPlugin, Actor } from '@eriengine/plugin-actor'
import { Plugin as IsometricScenePlugin } from '@eriengine/plugin-isometric-scene'
import { Plugin as IsometricCursorPlugin } from '@eriengine/plugin-isometric-cursor'
import { Plugin as DialoguePlugin } from '@eriengine/plugin-dialogue'
import { Plugin as FogOfWarPlugin } from '@eriengine/plugin-fog-of-war'

import BaseScene from '@/BaseScene'
{{ DATA_LISTS }}
{{ STORAGE_LISTS }}

type ScriptCallback = (this: NewScene, ...args: any) => void


// 이 씬이 참조하고 있는 스토리지 정보입니다.
const storage = Storages['{{ STORAGE_KEY }}']

// 씬의 고유값입니다. 이 값은 다른 씬과 절대로 중복되어선 안됩니다.
const key: string = '{{ KEY }}'

/*
 *  주의!
 *  씬 파일 이름의 뒷 부분은 절대 변경하지 마십시오.
 *  이 뒷 부분은 씬이 참조해야할 스크립트와 맵의 정보를 담고 있습니다.
 *
 *  가령 파일명이 scene.ABCDE.ts 일 경우, ABCDE 부분은 절대 변경되어선 안됩니다.
 *  씬 파일의 이름을 변경하고 싶다면, newName.ABCDE.ts 의 방식으로 뒷 부분을 제외하고 변경하십시오.
 *
 *
 *
 *
 *  이곳에서 씬의 기본적인 설정을 변경할 수 있습니다.
 *  기본적인 작동을 위한 코드가 이미 작성되어 있습니다만,
 *  좀 더 정교한 프로그래밍을 원한다면 이곳에서 수정을 할 수 있습니다.
 *
 *  하지만 대부분의 기능은 스크립트를 이용하여 처리할 수 있습니다.
 *  가능하다면 스크립트 기능을 이용하도록 하십시오.
 */
export default class NewScene extends BaseScene {
    static key: string = key

    protected actor!: ActorPlugin
    protected isometric!: IsometricScenePlugin
    protected cursor!: IsometricCursorPlugin
    protected dialogue!: DialoguePlugin
    protected fow!: FogOfWarPlugin

    private __scripts: Map<string, ScriptCallback[]> = new Map
    private __map = Object.values(storage.Map)[0]

    constructor() {
        super({ key, active: true })
        this.generateScript()
    }

    private generateScript(): void {
        for (const key in storage.Script) {
            const script = storage.Script[key as keyof typeof storage.Script]
            for (const type in script) {
                if (!this.__scripts.has(type)) {
                    this.__scripts.set(type, [])
                }
                const callback: ScriptCallback = script[type as keyof typeof script]
                this.__scripts.get(type)!.push(callback)
            }
        }
    }

    init(data: object = {}): void {
        this.runScript(this.__scripts.get('onSceneInit'), data)
        this.events.once(Phaser.Scenes.Events.DESTROY, () => this.runScript(this.__scripts.get('onSceneDestroy')))

        // 이 아래에 작성하세요
    }

    preload(): void {
        this.loadAssets()
        this.runScript(this.__scripts.get('onScenePreload'))

        // 이 아래에 작성하세요
    }

    create(): void {
        this.createAnimation()
        this.runScript(this.__scripts.get('onSceneCreate'))

        // 이 아래에 작성하세요
    }

    update(time: number, delta: number): void {
        this.runScript(this.__scripts.get('onSceneUpdate'), time, delta)

        // 이 아래에 작성하세요
    }
}