import Phaser from 'phaser'
import BaseScene from '@/BaseScene'
import BaseActor from '@/BaseActor'

{{ DATA_LISTS }}
{{ STORAGE_LISTS }}

/*
 *  주의!
 *  액터 파일 이름의 뒷 부분은 절대 변경하지 마십시오.
 *  이 뒷 부분은 액터가 참조해야할 스크립트의 정보를 담고 있습니다.
 *
 *  가령 파일명이 actor.ABCDE.ts 일 경우, ABCDE 부분은 절대 변경되어선 안됩니다.
 *  액터 파일의 이름을 변경하고 싶다면, newName.ABCDE.ts 의 방식으로 뒷 부분을 제외하고 변경하십시오.
 *
 *
 *
 *
 *  이곳에서 액터 기본적인 설정을 변경할 수 있습니다.
 *  기본적인 작동을 위한 코드가 이미 작성되어 있습니다만,
 *  좀 더 정교한 프로그래밍을 원한다면 이곳에서 수정을 할 수 있습니다.
 *
 *  하지만 대부분의 기능은 스크립트를 이용하여 처리할 수 있습니다.
 *  가능하다면 스크립트 기능을 이용하도록 하십시오.
 */

export default class SampleActor extends BaseActor {

  constructor(scene: BaseScene, x: number, y: number, texture: string|Phaser.Textures.Texture, frame?: string|number) {
    super(scene, x, y, texture, frame)
    this.generateScript(Storages, '{{ STORAGE_KEY }}')
  }

  start(): void {
    super.start()
    // 이 아래에 작성하세요

    // this.run.useMovingKey('arrow') /* 커서로 액터를 움직일 수 있도록 만듭니다. wasd, arrow 둘 중 택할 수 있습니다. */
  }

  update(time: number, delta: number): void {
    super.update(time, delta)
    // 이 아래에 작성하세요

    this.playMovingAnimation()
  }

  end(): void {
    super.end()
    // 이 아래에 작성하세요
    
  }

  protected playMovingAnimation(): void {

    if (!this.run.isMoving) {
      // this.play(Animations[].key, true)
    }
    if (this.run.isMovingLeft) {
      // this.flipX = false
      // this.play(Animations[].key, true)
    }
    if (this.run.isMovingRight) {
      // this.flipX = true
      // this.play(Animations[].key, true)
    }
    if (this.run.isMovingDown) {
      // this.play(Animations[].key, true)
    }
    if (this.run.isMovingUp) {
      // this.play(Animations[].key, true)
    }

  }
}