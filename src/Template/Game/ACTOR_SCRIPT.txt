import Phaser from 'phaser'
import BaseActor from '@/BaseActor'

{{ DATA_LISTS }}

/**
 *  타입 추론을 위한 클래스 타입입니다.
 *  해당하는 올바른 액터를 선택하여 주십시오.
 *
 *  이 스크립트에서만 사용하고 싶은 임시 멤버변수가 있다면, 이 클래스 안에서 선언해둘 수 있습니다.
 *  다만 선언되어 있을 뿐이지, 실제로 그 데이터를 갖게 되는 것은 아니기 때문에 주의하십시오.
 */
declare class Actor extends Actors[].default {}



//  ██╗     ██╗███████╗███████╗ ██████╗██╗   ██╗ ██████╗██╗     ███████╗
//  ██║     ██║██╔════╝██╔════╝██╔════╝╚██╗ ██╔╝██╔════╝██║     ██╔════╝
//  ██║     ██║█████╗  █████╗  ██║      ╚████╔╝ ██║     ██║     █████╗  
//  ██║     ██║██╔══╝  ██╔══╝  ██║       ╚██╔╝  ██║     ██║     ██╔══╝  
//  ███████╗██║██║     ███████╗╚██████╗   ██║   ╚██████╗███████╗███████╗
//  ╚══════╝╚═╝╚═╝     ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝╚══════╝╚══════╝
//                                                                      
//  여기서부터 액터의 라이프사이클 관련 함수입니다.
//  액터의 시작, 매 프레임마다, 그리고 파괴될 때 작동할 내용을 프로그래밍 할 수 있습니다.



/**
 *  액터가 생성되었을 때 호출될 함수입니다.
 */
export function onActorStart(this: Actor): void {
  {{ onActorStart }}
}

/**
 *  액터가 업데이트 될 때 마다 호출될 함수입니다.
 *  매 프레임마다 작동하므로 무거운 작업을 사용하지 마십시오.
 *  @param time     액터가 시작하고 지나간 시간(ms)입니다.
 *  @param delta    이전 프레임과 현재 프레임 사이에 흐른 시간(ms)입니다. 60프레임이므로, 일반적으로 16ms입니다.
 */
export function onActorUpdate(this: Actor, time: number, delta: number): void {
  {{ onActorUpdate }}
}

/**
 *  액터가 파괴될 때 호출될 함수입니다.
 */
export function onActorEnd(this: Actor): void {
  {{ onActorEnd }}
}



//  ██████╗  █████╗ ████████╗████████╗██╗     ███████╗
//  ██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██║     ██╔════╝
//  ██████╔╝███████║   ██║      ██║   ██║     █████╗  
//  ██╔══██╗██╔══██║   ██║      ██║   ██║     ██╔══╝  
//  ██████╔╝██║  ██║   ██║      ██║   ███████╗███████╗
//  ╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝
//                                                    
//  여기서부터 액터의 전투 관련 함수입니다.

/**
 *  액터가 스킬을 사용해서 대상 액터를 적중시켰을 때 호출될 함수입니다.
 *  @param target       적중시킨 대상 액터입니다.
 *  @param information  적중시킨 스킬에 대한 정보입니다.
 */
export function onActorHit(this: Actor, target: BaseActor, information: object): void {
  {{ onActorHit }}
}

/**
 *  액터가 스킬에 적중당했을 때 호출될 함수입니다.
 *  @param from         적중당한 스킬을 사용한 대상 액터입니다.
 *  @param information  적중당한 스킬에 대한 정보입니다.
 */
export function onActorGetHit(this: Actor, from: BaseActor, information: object): void {
  {{ onActorGetHit }}
}

/**
 *  액터가 전투에서 패배했을 때 호출될 함수입니다.
 *  액터는 actor.battle.defeat() 메서드를 호출하여 패배를 선언할 수 있습니다.
 *  패배를 선언하게 되면, 이 액터와 교전하고 있던 대상 액터들은 승리하게 될 것입니다.
 *  @param from  액터와 교전하고 있던 대상 액터들입니다.
 */
export function onActorDefeat(this: Actor, ...from: BaseActor[]): void {
  {{ onActorDefeat }}
}

/**
 *  액터가 전투에서 승리했을 때 호출될 함수입니다.
 *  교전하고 있던 대상 액터가 패배를 선언하면, 이 액터는 승리하게 됩니다.
 *  @param from  패배를 선언한 대상 액터입니다.
 */
export function onActorWin(this: Actor, from: BaseActor): void {
  {{ onActorWin }}
}



//   ██████╗ ██████╗ ██╗     ██╗     ██╗██████╗ ███████╗
//  ██╔════╝██╔═══██╗██║     ██║     ██║██╔══██╗██╔════╝
//  ██║     ██║   ██║██║     ██║     ██║██║  ██║█████╗  
//  ██║     ██║   ██║██║     ██║     ██║██║  ██║██╔══╝  
//  ╚██████╗╚██████╔╝███████╗███████╗██║██████╔╝███████╗
//   ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝╚═════╝ ╚══════╝
//                                                      
//  여기서부터 물리 충돌 관련 함수입니다.

/**
 *  액터가 다른 액터와 충돌했을 때 호출될 함수입니다.
 *  @param data  충돌과 관련된 물리 정보입니다.
 *  @param pair  충돌한 대상 액터입니다.
 */
export function onCollideWithActorStart(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: BaseActor): void {
  {{ onCollideWithActorStart }}
}

/**
 *  액터가 다른 액터와 충돌하고 있는 동안 호출될 함수입니다.
 *  이 함수는 두 액터가 서로 떨어지기 전까지 매 프레임 업데이트마다 호출됩니다.
 *  @param data  충돌과 관련된 물리 정보입니다.
 *  @param pair  충돌한 대상 액터입니다.
 */
export function onCollideWithActorActive(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: BaseActor): void {
  {{ onCollideWithActorActive }}
}

/**
 *  액터가 다른 액터와 충돌이 끝났을 때 호출될 함수입니다.
 *  @param data  충돌과 관련된 물리 정보입니다.
 *  @param pair  충돌한 대상 액터입니다.
 */
export function onCollideWithActorEnd(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: BaseActor): void {
  {{ onCollideWithActorEnd }}
}

/**
 *  액터가 벽, 또는 센서와 충돌했을 때 호출될 함수입니다.
 *  @param data     충돌과 관련된 물리 정보입니다.
 *  @param pair     충돌한 대상 벽, 또는 센서입니다.
 *  @param alias    충돌한 대상 벽, 또는 센서의 별칭입니다. 이는 씬 파렛트에서 속성으로 지정한 값입니다.
 */
export function onCollideWithWallStart(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: Phaser.Physics.Matter.Sprite, alias: string): void {
  {{ onCollideWithWallStart }}
}

/**
 *  액터가 벽, 또는 센서와 충돌하고 있는 동안 호출될 함수입니다.
 *  이 함수는 액터가 떨어지기 전까지 매 프레임 업데이트마다 호출됩니다.
 *  @param data     충돌과 관련된 물리 정보입니다.
 *  @param pair     충돌한 대상 벽, 또는 센서입니다.
 *  @param alias    충돌한 대상 벽, 또는 센서의 별칭입니다. 이는 씬 파렛트에서 속성으로 지정한 값입니다.
 */
export function onCollideWithWallActive(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: Phaser.Physics.Matter.Sprite, alias: string): void {
  {{ onCollideWithWallActive }}
}

/**
 *  액터가 벽, 또는 센서와 충돌이 끝났을 때 호출될 함수입니다.
 *  @param data     충돌과 관련된 물리 정보입니다.
 *  @param pair     충돌한 대상 벽, 또는 센서입니다.
 *  @param alias    충돌한 대상 벽, 또는 센서의 별칭입니다. 이는 씬 파렛트에서 속성으로 지정한 값입니다.
 */
export function onCollideWithWallEnd(this: Actor, data: Phaser.Types.Physics.Matter.MatterCollisionData, pair: Phaser.Physics.Matter.Sprite, alias: string): void {
  {{ onCollideWithWallEnd }}
}