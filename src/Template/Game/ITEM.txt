import Phaser from 'phaser'
import { Inventory, Item, ItemBlueprint } from '@eriengine/plugin-inventory'

import BaseActor from '@/BaseActor'

{{ DATA_LISTS }}

/** 아이템의 고유 키입니다. 이 값은 다른 아이템 종류와 결코 중복되어선 안됩니다. 잘 모르겠다면 건드리지 마십시오. */
export const key: string = __filename

/** 아이템의 타입입니다. 이는 아이템의 종류를 구분짓는 용도로 사용합니다. 가령 갑옷, 무기, 신발, 소모품 등으로 구분지을 수 있습니다. */
export const type: string = ''

/** 게임에서 보여질 아이템의 이름입니다. */
export const name: string = ''

/** 게임에서 보여질 아이템의 이미지입니다. Phaser에서 불러온 텍스쳐 키를 사용합니다. */
export const thumbnail: string = ''

/** 아이템의 설명입니다. */
export const description: string = ''

/** 아이템을 모을 수 있는 최대 갯수를 지정합니다. 최소 `1`입니다. 이 개수만큼 아이템을 중첩하여 슬롯을 아낄 수 있습니다. */
export const maximumPcs: number = 1

/** 아이템의 무게입니다. 인벤토리의 무게 시스템을 사용한다면 이 값을 통해 인벤토리가 꽉 찼을 경우 더 이상 추가할 수 없게 됩니다. */
export const weight: number = 0

/** 아이템이 일회성 소모품인지 여부를 지정합니다. 이 값이 `true`라면, `use` 메서드로 아이템을 사용했을 때, 인벤토리에서 1개 제거됩니다. 이는 포션과 같은 일회성 아이템을 위해 사용됩니다. */
export const disposable: boolean = true


/**
 * 아이템을 인벤토리에 추가하기 전에, 호출될 콜백함수입니다.  
 * 이 함수는 아이템을 인벤토리에 추가하기 전에, 유효성을 검사하는 함수입니다.
 * 이 함수에서 `true`를 반환한다면, 아이템은 인벤토리에 추가될 것입니다. 하지만 `false`를 반환한다면 아이템은 인벤토리에 추가되지 않습니다.
 * 이 함수를 지정하지 않는다면, 유효성 검사는 항상 `true`를 반환할 것입니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속한 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onBeforeAdd = (item: ItemBlueprint, inventory: Inventory, owner: BaseActor): boolean => {
  // 유효성 검사를 위한 내용을 프로그래밍 하세요.
  // false를 반환하면, 아이템을 인벤토리에 추가하는 것을 막을 수 있습니다.

  return true
}

/**
 * 아이템이 인벤토리에 추가됐을 때 호출될 콜백함수입니다.
 * 이 함수는 `onBeforeAdd` 메서드의 유효성을 통과하고, 슬롯, 무게 제한을 통과한 이후에 실제로 인벤토리에 추가되었을 때만 호출됩니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속한 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onAdd = (item: Item, inventory: Inventory, owner: BaseActor): void => {

}

/**
 * 아이템을 인벤토리에서 제거하기 전에, 호출될 콜백함수입니다.  
 * 이 함수는 아이템을 인벤토리에서 제거하기 전에, 유효성을 검사하는 함수입니다.
 * 이 함수에서 `true`를 반환한다면, 아이템은 인벤토리에서 제거될 것입니다. 하지만 `false`를 반환한다면 아이템은 인벤토리에서 제거되지 않습니다.
 * 이 함수를 지정하지 않는다면, 유효성 검사는 항상 `true`를 반환할 것입니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속한 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onBeforeDrop = (item: Item, inventory: Inventory, owner: BaseActor): boolean => {
  // 유효성 검사를 위한 내용을 프로그래밍 하세요.
  // false를 반환하면, 아이템을 인벤토리에서 제거하는 것을 막을 수 있습니다.

  return true
}

/**
 * 아이템을 인벤토리에서 제거했을 때, 호출될 콜백함수입니다.
 * 이 함수는 `onBeforeDrop` 메서드의 유효성을 통과한 이후에 실제로 인벤토리에서 제거되었을 때만 호출됩니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속했던 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onDrop = (item: Item, inventory: Inventory, owner: BaseActor): void => {

}

/**
 * 아이템을 사용하기 전에, 호출될 콜백함수입니다.  
 * 이 함수는 아이템을 사용하기 전에, 유효성을 검사하는 함수입니다.
 * 이 함수에서 `true`를 반환한다면, 아이템은 사용될 것입니다. 하지만 `false`를 반환한다면 아이템은 사용되지 않습니다.
 * 이 함수를 지정하지 않는다면, 유효성 검사는 항상 `true`를 반환할 것입니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속한 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onBeforeUse = (item: Item, inventory: Inventory, owner: BaseActor): boolean => {
  // 유효성 검사를 위한 내용을 프로그래밍 하세요.
  // false를 반환하면, 아이템을 사용하는 것을 막을 수 있습니다.

  return true
}

/**
 * 아이템을 사용했을 때, 호출될 콜백함수입니다.
 * 이 함수는 `onBeforeUse` 메서드의 유효성을 통과한 이후에 실제로 사용되었을 때만 호출됩니다.
 * @param item 해당 아이템 인스턴스입니다.
 * @param inventory 해당 아이템이 속했던 인벤토리 인스턴스입니다.
 * @param 아이템의 소유자입니다.
 */
export const onUse = (item: Item, inventory: Inventory, owner: BaseActor): void => {

}